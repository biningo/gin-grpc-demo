// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AServiceClient is the client API for AService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AServiceClient interface {
	EchoA(ctx context.Context, in *AMsg, opts ...grpc.CallOption) (*AMsg, error)
}

type aServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAServiceClient(cc grpc.ClientConnInterface) AServiceClient {
	return &aServiceClient{cc}
}

func (c *aServiceClient) EchoA(ctx context.Context, in *AMsg, opts ...grpc.CallOption) (*AMsg, error) {
	out := new(AMsg)
	err := c.cc.Invoke(ctx, "/pb.AService/EchoA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AServiceServer is the server API for AService service.
// All implementations must embed UnimplementedAServiceServer
// for forward compatibility
type AServiceServer interface {
	EchoA(context.Context, *AMsg) (*AMsg, error)
	mustEmbedUnimplementedAServiceServer()
}

// UnimplementedAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAServiceServer struct {
}

func (UnimplementedAServiceServer) EchoA(context.Context, *AMsg) (*AMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoA not implemented")
}
func (UnimplementedAServiceServer) mustEmbedUnimplementedAServiceServer() {}

// UnsafeAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AServiceServer will
// result in compilation errors.
type UnsafeAServiceServer interface {
	mustEmbedUnimplementedAServiceServer()
}

func RegisterAServiceServer(s grpc.ServiceRegistrar, srv AServiceServer) {
	s.RegisterService(&_AService_serviceDesc, srv)
}

func _AService_EchoA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AServiceServer).EchoA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AService/EchoA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AServiceServer).EchoA(ctx, req.(*AMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _AService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AService",
	HandlerType: (*AServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoA",
			Handler:    _AService_EchoA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "a.proto",
}
